{"version":3,"sources":["components/Nav.js","components/Home.js","components/About.js","components/Shop.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","Home","About","Shop","useEffect","fetchItems","useState","items","setItems","a","fetch","data","console","log","json","map","item","key","title","body","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oPA8BeA,MA1Bf,WACE,IAAMC,EAAW,CACfC,MAAO,SAGT,OACE,6BACE,oCACA,wBAAIC,UAAU,aACZ,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,UACxB,sCAEF,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,SACxB,qCAEF,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,OACxB,uCAEF,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,OACxB,0CCTKC,MAXf,WACE,OACE,yBAAKH,UAAU,QACb,4BAAQA,UAAU,2BAChB,0CAEF,sDCKSI,MAXf,WACE,OACE,yBAAKJ,UAAU,SACb,4BAAQA,UAAU,4BAChB,2CAEF,uD,iCC4BSK,MAlCf,WACEC,qBAAU,WACRC,MACC,IAHW,MAKYC,mBAAS,IALrB,mBAKPC,EALO,KAKAC,EALA,KAORH,EAAU,uCAAG,8BAAAI,EAAA,sEACEC,MAAM,8CADR,cACXC,EADW,OAEjBC,QAAQC,IAAI,uBAAwBF,GAFnB,SAGGA,EAAKG,OAHR,OAGXP,EAHW,OAIjBK,QAAQC,IAAI,gBAAiBN,GAC7BC,EAASD,GALQ,2CAAH,qDAQhB,OACE,yBAAKT,UAAU,QACb,4BAAQA,UAAU,2BAChB,0CAEF,yBAAKA,UAAU,QACZS,EAAMQ,KAAI,SAACC,GAAD,OACT,yBAAKlB,UAAU,OAAOmB,IAAKD,EAAKE,OAC9B,yBAAKpB,UAAU,wBACb,wBAAIA,UAAU,cAAckB,EAAKE,QAEnC,uBAAGpB,UAAU,aAAakB,EAAKG,a,OCA5BC,MArBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,iBACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,QACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOuB,OAAK,EAACC,KAAK,IAAIC,UAAWtB,IACjC,kBAAC,IAAD,CAAOqB,KAAK,SAASC,UAAWrB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,QAAQC,UAAWpB,IAC/B,kBAAC,IAAD,CAAOmB,KAAK,SAASC,UAAWrB,IAChC,kBAAC,IAAD,CAAOoB,KAAK,MAAMC,UAAWpB,UCRvBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.a376cd7c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../App.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Nav() {\r\n  const navStyle = {\r\n    color: \"white\",\r\n  };\r\n\r\n  return (\r\n    <nav>\r\n      <h3>Logo</h3>\r\n      <ul className=\"nav-links\">\r\n        <Link style={navStyle} to=\"/about\">\r\n          <li>About</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/shop\">\r\n          <li>Shop</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/##\">\r\n          <li>Link 3</li>\r\n        </Link>\r\n        <Link style={navStyle} to=\"/##\">\r\n          <li>Link 4</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <div className=\"home\">\r\n      <header className=\"page-header home-header\">\r\n        <h1>Home Page</h1>\r\n      </header>\r\n      <p>Home page's contents </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction About() {\r\n  return (\r\n    <div className=\"about\">\r\n      <header className=\"page-header about-header\">\r\n        <h1>About Page</h1>\r\n      </header>\r\n      <p>About page's contents </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"../App.css\";\r\n\r\nfunction Shop() {\r\n  useEffect(() => {\r\n    fetchItems();\r\n  }, []);\r\n\r\n  const [items, setItems] = useState([]);\r\n\r\n  const fetchItems = async () => {\r\n    const data = await fetch(\"https://jsonplaceholder.typicode.com/posts\");\r\n    console.log(\"THIS IS DAATTTTAAAAA\", data);\r\n    const items = await data.json();\r\n    console.log(\"THIS IS ITEMS\", items);\r\n    setItems(items);\r\n  };\r\n\r\n  return (\r\n    <div className=\"shop\">\r\n      <header className=\"page-header shop-header\">\r\n        <h1>Shop Page</h1>\r\n      </header>\r\n      <div className=\"grid\">\r\n        {items.map((item) => (\r\n          <div className=\"card\" key={item.title}>\r\n            <div className=\"card-title-container\">\r\n              <h2 className=\"card-title\">{item.title}</h2>\r\n            </div>\r\n            <p className=\"card-body\">{item.body}</p>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Shop;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Nav from \"./components/Nav\";\nimport Home from \"./components/Home\";\nimport About from \"./components/About\";\nimport Shop from \"./components/Shop\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <div className=\"app-container\">\n          <Nav />\n          <div className=\"page\">\n            <Switch>\n              <Route exact path=\"/\" component={Home} />\n              <Route path=\"/about\" component={About} />\n              <Route path=\"/shop\" component={Shop} />\n              <Route path=\"/link3\" component={About} />\n              <Route path=\"/##\" component={Shop} />\n            </Switch>\n          </div>\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}